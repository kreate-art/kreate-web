import { NextApiRequest, NextApiResponse } from "next/types";

import { mergeGenesisKreationLayers } from "@/modules/kolours/genesis-kreation";
import { apiCatch, ClientError } from "@/modules/next-backend/api/errors";
import { sendJson } from "@/modules/next-backend/api/helpers";
import { db, ipfs, redis } from "@/modules/next-backend/connections";
import { getIpfsUrl } from "@/modules/urls";

/**
 * Preview image of genesis kreation will be generated by combining the base
 * image with all minted layer images
 */
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const { slug, layers } = req.query;
    ClientError.assert(slug && typeof slug === "string", "slug is required");
    ClientError.assert(
      layers && typeof layers === "string",
      "layers is required"
    );

    const layerIndexes = layers
      .split(",")
      .map((i) => parseInt(i.trim()))
      .filter((i) => !isNaN(i));
    ClientError.assert(
      layerIndexes.length > 0,
      "must specified at least 1 layer"
    );

    const { cid: mergedLayerCid, status } = await mergeGenesisKreationLayers(
      db,
      ipfs,
      redis,
      slug,
      layerIndexes
    );

    res.setHeader("X-Kreate-Cache", status);
    res.setHeader("Cache-Control", "public, max-age=604800, immutable");
    sendJson(res.status(200), { url: getIpfsUrl(mergedLayerCid) });
  } catch (error) {
    apiCatch(req, res, error);
  }
}
